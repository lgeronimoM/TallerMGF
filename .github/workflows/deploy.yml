name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Opcional: publica el tag que vas a usar en deploy (branch-SHA)
      - name: Set image tag output
        id: tag
        run: echo "IMAGE_TAG=${GITHUB_REF_NAME}-${GITHUB_SHA}" >> $GITHUB_OUTPUT

  deploy:
    needs: [build]
    # ðŸ‘‡ CAMBIO CLAVE: usar tu self-hosted runner (labels exactos de tu captura)
    runs-on: [self-hosted, Linux, X64]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    env:
      # usa el mismo tag branch-SHA que construiste arriba
      IMAGE_TAG: ${{ needs.build.outputs.IMAGE_TAG || format('{0}-{1}', github.ref_name, github.sha) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Preflight (red y API server)
        run: |
          set -euxo pipefail
          timeout 5 bash -c '</dev/tcp/10.10.4.80/6443' && echo "TCP OK" || (echo "TCP FAIL"; exit 1)
          kubectl version --client=true
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy to Kubernetes
        run: |
          cat <<EOF > deployment.yml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: flask-app
            labels: { app: flask-app }
          spec:
            replicas: 3
            selector:
              matchLabels: { app: flask-app }
            template:
              metadata:
                labels: { app: flask-app }
              spec:
                containers:
                - name: flask-app
                  image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  ports: [ { containerPort: 5000 } ]
                  env: [ { name: FLASK_ENV, value: "production" } ]
                  resources:
                    requests: { memory: "64Mi", cpu: "50m" }
                    limits:   { memory: "128Mi", cpu: "100m" }
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: flask-app-service
            labels: { app: flask-app }
          spec:
            type: ClusterIP
            ports:
            - port: 80
              targetPort: 5000
              protocol: TCP
            selector:
              app: flask-app
          EOF

          kubectl apply --dry-run=client -f deployment.yml
          kubectl apply -f deployment.yml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/flask-app -n default --timeout=300s
          kubectl get services -n default

