name: Deploy TallerMGF to Local Kubernetes

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üîç Verificar herramientas
      run: |
        echo "üê≥ Docker:" && docker --version
        echo "‚ò∏Ô∏è Kubectl:" && kubectl version --client=true --short
        echo "üì¶ Cluster info:" && kubectl cluster-info

    - name: üõ¢Ô∏è Asegurar registry local en localhost:5000
      run: |
        if ! docker ps --format '{{.Names}}' | grep -q '^registry$'; then
          if docker ps -a --format '{{.Names}}' | grep -q '^registry$'; then
            docker start registry
          else
            docker run -d --restart=always -p 5000:5000 --name registry registry:2
          fi
        fi
        echo "‚úÖ Registry local listo en http://localhost:5000"

    - name: üèóÔ∏è Construir, etiquetar y publicar imagen
      env:
        IMG_SHA: localhost:5000/tallermgf:${{ github.sha }}
      run: |
        echo "üî® Construyendo imagen‚Ä¶"
        docker build -t tallermgf:latest .
        docker tag tallermgf:latest "${IMG_SHA}"
        docker push "${IMG_SHA}"
        echo "‚úÖ Publicada ${IMG_SHA}"

    - name: üöÄ Desplegar a Kubernetes
      env:
        IMG_SHA: localhost:5000/tallermgf:${{ github.sha }}
      run: |
        echo "üìã Aplicando manifiestos‚Ä¶"
        kubectl apply -f k8s/namespace.yaml
        # Sustituir SOLO la l√≠nea 'image:' por la imagen con SHA
        sed -E 's|^(\s*image:\s*).*$|\1'"${IMG_SHA}"'|' k8s/deployment.yaml > /tmp/deployment-temp.yaml
        kubectl apply -f /tmp/deployment-temp.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: ‚è≥ Esperar rollout del deployment
      run: |
        set -e
        kubectl rollout status deployment/tallermgf -n tallermgf --timeout=300s

    - name: ‚úÖ Verificaci√≥n final
      run: |
        echo "üìä Deployment:"
        kubectl get deployment tallermgf -n tallermgf -o wide
        echo; echo "üìã Pods:"
        kubectl get pods -n tallermgf -o wide
        echo; echo "üåê Services:"
        kubectl get svc -n tallermgf
        echo; echo "üîó Ingress:"
        kubectl get ingress -n tallermgf
        echo; echo "üîç √öltimos eventos:"
        kubectl get events -n tallermgf --sort-by='.lastTimestamp' | tail -50

    - name: üß∞ Diagn√≥stico si algo falla
      if: failure()
      run: |
        echo "‚ùå Fall√≥ el despliegue; recolectando diagn√≥stico‚Ä¶"
        kubectl describe deployment/tallermgf -n tallermgf || true
        kubectl describe pods -n tallermgf || true
        kubectl get events -n tallermgf --sort-by='.lastTimestamp' | tail -100 || true
        POD=$(kubectl get pods -n tallermgf -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
        if [ -n "$POD" ]; then
          echo; echo "üßæ Logs del Pod ${POD}:"
          kubectl logs "$POD" -n tallermgf --all-containers=true || true
        fi

    - name: üìù Informaci√≥n de acceso
      run: |
        echo "üéâ ¬°Deployment completado!"
        echo "URL:       http://tallermgf.local"
        echo "Health:    http://tallermgf.local/health"
        echo
        echo "Si no resuelve el host, a√±ade en /etc/hosts de tu m√°quina:"
        echo "  127.0.0.1 tallermgf.local"
        echo
        echo "Para inspecci√≥n r√°pida sin ingress:"
        echo "  kubectl -n tallermgf port-forward svc/tallermgf-service 8080:80"
        echo "  curl http://localhost:8080/health"
