name: Build and Deploy to Kubernetes

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compute image vars (lowercase + tag)
        id: imgvars
        run: |
          echo "image_name_lc=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
          echo "image_tag=${GITHUB_REF_NAME}-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push (branch-SHA + latest)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.imgvars.outputs.image_name_lc }}:${{ steps.imgvars.outputs.image_tag }}
            ${{ env.REGISTRY }}/${{ steps.imgvars.outputs.image_name_lc }}:latest

  deploy:
    needs: build
    runs-on:
      - self-hosted
      - Linux
      - X64
    if: ${{ github.ref == 'refs/heads/master' }}
    env:
      REGISTRY: ghcr.io

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compute image ref
        id: img
        shell: bash
        run: |
          IMAGE_NAME_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG="${GITHUB_REF_NAME}-${GITHUB_SHA}"
          IMAGE_REF="${REGISTRY}/${IMAGE_NAME_LC}:${IMAGE_TAG}"
          echo "name=${IMAGE_NAME_LC}" >> "$GITHUB_OUTPUT"
          echo "tag=${IMAGE_TAG}" >> "$GITHUB_OUTPUT"
          echo "ref=${IMAGE_REF}" >> "$GITHUB_OUTPUT"
          echo "Using image: ${IMAGE_REF}"

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.30.0

      - name: Configure kubeconfig
        shell: bash
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Ensure namespace
        run: kubectl apply -f k8s/namespace.yaml

      # (Opcional) Solo si tu imagen en GHCR es privada: configura GHCR_* en Secrets.
      - name: Ensure imagePullSecret (if private)
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GHCR_EMAIL: ${{ secrets.GHCR_EMAIL }}
        run: |
          if [ -n "$GHCR_USER" ] && [ -n "$GHCR_TOKEN" ] && [ -n "$GHCR_EMAIL" ]; then
            kubectl -n tallermgf delete secret ghcr-creds --ignore-not-found
            kubectl -n tallermgf create secret docker-registry ghcr-creds \
              --docker-server=ghcr.io \
              --docker-username="$GHCR_USER" \
              --docker-password="$GHCR_TOKEN" \
              --docker-email="$GHCR_EMAIL"
            kubectl -n tallermgf patch deploy/tallermgf --type=merge -p \
              '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"ghcr-creds"}]}}}}' || true
          else
            echo "Skipping imagePullSecret (no GHCR_* secrets)."
          fi

      # Asegura que el YAML base no quedó modificado por intentos previos
      - name: Restore base deployment (safety)
        run: git checkout -- k8s/deployment.yaml

      # Aplica manifests base SIN tocar el YAML
      - name: Apply manifests
        run: |
          set -euxo pipefail
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      # Ahora ajusta la imagen efectiva en el objeto del clúster
      - name: Set image to built tag
        run: |
          kubectl -n tallermgf set image deploy/tallermgf \
            tallermgf=${{ steps.img.outputs.ref }}

      - name: Verify rollout
        run: |
          kubectl rollout status deployment/tallermgf -n tallermgf --timeout=300s
          kubectl get rs,pods -n tallermgf -o wide

      - name: Debug on failure
        if: failure()
        run: |
          kubectl get deploy tallermgf -n tallermgf -o yaml | egrep -A2 'name:|image:|strategy:' || true
          kubectl get rs -n tallermgf -o wide || true
          kubectl get pods -n tallermgf -o wide || true
          kubectl get events -n tallermgf --sort-by=.lastTimestamp | tail -n 120 || true
