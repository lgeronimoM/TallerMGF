name: Build & Deploy TallerMGF (Docker Hub)

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: self-hosted
    env:
      DOCKERHUB_REPO: lgeronimom/tallermgf
      NAMESPACE: tallermgf

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üîç Herramientas
        run: |
          kubectl version --client=true
          kubectl cluster-info

      - name: üîê Login Docker Hub
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "$DH_PASS" | docker login -u "$DH_USER" --password-stdin

      - name: üèóÔ∏è Build & Push (tags SHA y latest)
        env:
          IMAGE_SHA: ${{ env.DOCKERHUB_REPO }}:${{ github.sha }}
          IMAGE_LATEST: ${{ env.DOCKERHUB_REPO }}:latest
        run: |
          docker build -t "$IMAGE_SHA" .
          docker tag "$IMAGE_SHA" "$IMAGE_LATEST"
          docker push "$IMAGE_SHA"
          docker push "$IMAGE_LATEST"
          echo "IMAGE_SHA=$IMAGE_SHA" >> $GITHUB_ENV

      - name: üöÄ Apply manifests
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: üîÑ Actualizar imagen a la del commit (SHA)
        run: |
          kubectl -n $NAMESPACE set image deployment/tallermgf tallermgf=${IMAGE_SHA} --record

      - name: ‚è≥ Esperar rollout
        run: kubectl -n $NAMESPACE rollout status deploy/tallermgf --timeout=300s

      - name: ‚úÖ Verificaci√≥n
        run: |
          kubectl -n $NAMESPACE get deploy,pods,svc,ingress -o wide
          kubectl -n $NAMESPACE get events --sort-by=.lastTimestamp | tail -50

      - name: üß∞ Diagn√≥stico si falla
        if: failure()
        run: |
          kubectl -n $NAMESPACE describe deployment/tallermgf || true
          kubectl -n $NAMESPACE describe pods || true
          kubectl -n $NAMESPACE get events --sort-by='.lastTimestamp' | tail -150 || true

      # GitHub Metrics
      - name: üìä Reportar estado del deploy
        if: always()
        shell: bash
        env:
          INFLUX_URL: ${{ secrets.INFLUX_URL }}
          INFLUX_ORG: ${{ secrets.INFLUX_ORG }}
          INFLUX_BUCKET: ${{ secrets.INFLUX_BUCKET }}
          INFLUX_TOKEN: ${{ secrets.INFLUX_TOKEN }}

          GH_ACTOR: ${{ github.actor }}
          GH_REPOSITORY: ${{ github.repository }}
          GH_REF_NAME: ${{ github.ref_name }}
          GH_TS: ${{ github.event.head_commit.timestamp }}
          STATUS: ${{ job.status }} # success | failure | cancelled
        run: |
          set -euo pipefail
          esc() { sed -E 's/([ ,=])/\\\1/g'; }

          user=$(printf '%s' "${GH_ACTOR:-unknown}" | esc)
          repo=$(printf '%s' "${GH_REPOSITORY:-unknown}" | esc)
          branch=$(printf '%s' "${GH_REF_NAME:-unknown}" | esc)
          status=$(printf '%s' "${STATUS:-unknown}" | esc)

          # Timestamp en ns: usa el del commit si existe; si no, ahora
          if [ -n "${GH_TS:-}" ]; then
            TS=$(date -u -d "$GH_TS" +%s%N || date -u +%s%N)
          else
            TS=$(date -u +%s%N)
          fi

          LINE="github_deploys,user=${user},repo=${repo},branch=${branch},status=${status} value=1 ${TS}"
          echo "Line protocol ‚Üí $LINE"

          curl -sfS -i -X POST "$INFLUX_URL/api/v2/write?org=$INFLUX_ORG&bucket=$INFLUX_BUCKET&precision=ns" \
            -H "Authorization: Token $INFLUX_TOKEN" \
            -H "Content-Type: text/plain; charset=utf-8" \
            --data-binary "$LINE" || echo "‚ö†Ô∏è No se pudo enviar la m√©trica"


