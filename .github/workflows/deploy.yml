name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ toLower(github.repository) }}   # ðŸ‘ˆ siempre minÃºsculas
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: [build]
    runs-on: [self-hosted, Linux, X64]   # tu runner privado
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ toLower(github.repository) }}                        # ðŸ‘ˆ minÃºsculas
      IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}                  # p.ej. master-<sha>

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'   # o la que prefieras

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Ensure namespace exists
        run: |
          kubectl apply -f k8s/namespace.yaml

      - name: Inject image into deployment
        run: |
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          sed -i "s|__IMAGE_PLACEHOLDER__|${IMG}|g" k8s/deployment.yaml
          echo "Using image: ${IMG}"
          grep -n 'image:' k8s/deployment.yaml

      - name: Apply manifests
        run: |
          set -euxo pipefail
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: Verify rollout
        run: |
          kubectl rollout status deployment/tallermgf -n tallermgf --timeout=300s
          kubectl get all -n tallermgf

      - name: Debug on failure
        if: failure()
        run: |
          set +e
          echo "---- DEPLOY ----"
          kubectl get deploy tallermgf -n tallermgf -o yaml | egrep -A2 'name:|image:|strategy:' || true
          echo "---- RS ----"
          kubectl get rs -n tallermgf -o wide || true
          echo "---- PODS ----"
          kubectl get pods -n tallermgf -o wide || true
          echo "---- EVENTS ----"
          kubectl get events -n tallermgf --sort-by=.lastTimestamp | tail -n 100 || true
          for p in $(kubectl get pods -n tallermgf -o name); do
            echo "---- DESCRIBE $p ----"
            kubectl describe -n tallermgf $p || true
          done
